{"version":3,"sources":["serviceWorker.js","Components/Idea.js","Components/IdeasList.js","Components/MyIdeas.js","Header.js","router/router.js","index.js"],"names":["Boolean","window","location","hostname","match","Idea","props","onDelete","index","children","onChange","useState","editing","setEditing","idea","value","editIdea","deleteIdea","saveIdea","event","preventDefault","console","log","ref","element","cols","rows","onClick","className","style","marginRight","IdeasList","ideas","setIdeas","useEffect","a","async","data","fetch","then","res","json","loadIdeas","map","item","id","group","fetchData","updateIdea","newIdea","i","prevState","filter","nextID","max","reduce","prev","curr","key","width","marginBottom","txt","MyIdeas","Component","Header","active","backgroundColor","color","fontWeight","header","listStyle","display","justifyContent","this","exact","to","activeStyle","ReactRouter","Fragment","path","component","IdeaList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18810a10.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react';\nimport { MdEdit, MdDelete, MdSave } from 'react-icons/md';\n\nexport default function Idea (props) {\n  const {\n    onDelete,\n    index,\n    children,\n    onChange\n  } = props;\n  const [editing, setEditing] = useState(false);\n\n  let idea = {value: ''};\n  const editIdea = () => setEditing(true);\n  const deleteIdea = () => onDelete(index);\n  const saveIdea = (event) => {\n    event.preventDefault();\n    console.log(idea.value, index);\n    onChange(idea.value, index);\n    setEditing(false);\n  };\n\n  function Form() {\n    return (\n      <div>\n        <form>\n          <textarea\n            ref={element => idea = element}\n            cols=\"30\" rows=\"10\" />\n          <span>\n            <button onClick={saveIdea}><MdSave /></button>\n          </span>\n        </form>\n      </div>\n    );\n  }\n\n  function UI() {\n    return (\n      <div className=\"idea\">\n        <div>{children}</div>\n        <span>\n          <button\n            onClick={editIdea}\n            className=\"btn btn-primary\"\n            style={{ marginRight: '7px' }}\n          >\n            <MdEdit />\n          </button>\n          <button\n            onClick={deleteIdea}\n            className=\"btn btn-primary\"\n            style={{ marginRight: '7px' }}\n          >\n            <MdDelete />\n          </button>\n        </span>\n      </div>\n    );\n  }\n\n  return editing ? <Form /> : <UI />;\n}\n\n","import React, { useState, useEffect } from 'react';\nimport Idea from './Idea';\nimport { MdAdd } from 'react-icons/md';\n// import data from '../data/data.json';\n\nexport default function IdeasList() {\n  const [ideas, setIdeas] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      let data = [];\n\n      try {\n        data = await fetch('http://localhost:3001/final-ideas/getAllIdeas').then(res => res.json());\n      } catch (err) {\n        console.log('error while fetching data :(', err);\n      }\n\n      const loadIdeas = data.map(item => ({ id: item.id, idea: item.idea, group: item.group }));\n\n      return setIdeas(loadIdeas);\n    }\n\n    fetchData();\n  }, []);\n\n  const updateIdea = (newIdea, i) => {\n    setIdeas(prevState => prevState.map(data => data.id !== i ? data : { ...data, idea: newIdea }));\n  };\n  const deleteIdea = id => {\n    console.log(`deleted: ${id}`);\n    setIdeas(prevState => prevState.filter(idea => idea.id !== id));\n  };\n  const nextID = (ideas = []) => {\n    let max = ideas.reduce((prev, curr) => prev.id > curr.id ? prev.id : curr.id, 0);\n\n    return ++max;\n  };\n  const addIdea = ({ event = null, id = null, txt = 'default title', group = 'default group' }) => {\n    console.log(event, id, txt, group);\n    setIdeas(prevState => ([\n      ...prevState, {\n        id: id !== null ? id : nextID(prevState),\n        idea: txt,\n        group,\n      }])\n    );\n  };\n\n  const renderEachIdea = (item, i) => {\n    return (\n      <div\n        key={ `container${item.id}` }\n        className=\"card\"\n        style={ { width: '18rem', marginBottom: '7px' } }\n      >\n        <div className=\"card-body\">\n          <Idea\n            index={ item.id }\n            onChange={ updateIdea }\n            onDelete={ deleteIdea }\n          >\n            { console.log(item) }\n            <h5 className=\"card-title\">{ item.idea }</h5>\n            <p className=\"card-text\">{ item.group }</p>\n          </Idea>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"ideasList\">\n      { ideas.map(renderEachIdea) }\n      <button\n        id=\"add\"\n        onClick={ addIdea }\n        className=\"btn btn-primary\"\n        style={ { marginRight: '7px' } }\n      >\n        <MdAdd />\n      </button>\n    </div>\n  );\n}\n","import React, {Component} from 'react'\n\nclass MyIdeas extends Component {\n    \n    render() {\n        return (\n            <div>\n                These are my ideas: TBD\n            </div>\n        )\n    }\n}\n\nexport default MyIdeas","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nclass Header extends Component {\n    active  = {\n        backgroundColor: '#212F3D',\n        color: 'white',\n        fontWeight: 'bold'\n    }\n    header = {\n        listStyle: 'none',\n        display: 'flex',\n        justifyContent: 'space-evenly'\n    }\n    render() {\n        return (\n            <div style={this.style}>\n                <NavLink exact to=\"/\" activeStyle={this.active}>\n                Home\n                </NavLink>\n                <NavLink exact to=\"/MyIdeas\" activeStyle={this.active}>\n                MyIdeas\n                </NavLink>\n            </div>\n        )\n    }\n}\n\nexport default Header","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport IdeaList from '../Components/IdeasList'\nimport MyIdeas from '../Components/MyIdeas'\nimport Header from '../Header'\n\nconst ReactRouter = () => {\n    return (\n        <React.Fragment>\n            <Header />\n            <Route exact path=\"/\" component={IdeaList} />\n            <Route exact path=\"/MyIdeas\" component={MyIdeas} />\n        </React.Fragment>\n    )\n}\n\nexport default ReactRouter","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport ReactRouter from './router/router'\n\nReactDOM.render(\n<Router>\n    <ReactRouter />\n</Router>,\ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}